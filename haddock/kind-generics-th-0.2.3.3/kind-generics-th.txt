-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Template Haskell support for generating `GenericK` instances
--   
--   This package provides Template Haskell functionality to automatically
--   derive <tt>GenericK</tt> instances (from the <tt>kind-generics</tt>
--   library).
@package kind-generics-th
@version 0.2.3.3


-- | Main module of <tt>kind-generics-th</tt>. Please refer to the
--   <tt>README</tt> file for documentation on how to use this package.
module Generics.Kind.TH

-- | Given the <a>Name</a> of a data type (or, the <a>Name</a> of a
--   constructor belonging to a data type), generate <a>GenericK</a>
--   instances for that data type. You will likely need to enable most of
--   these language extensions in order for GHC to accept the generated
--   code:
--   
--   <ul>
--   <li><pre>DataKinds</pre></li>
--   <li><tt>EmptyCase</tt> (if using an empty data type)</li>
--   <li><pre>FlexibleInstances</pre></li>
--   <li><pre>MultiParamTypeClasses</pre></li>
--   <li><tt>PolyKinds</tt> (if using a poly-kinded data type)</li>
--   <li><pre>TemplateHaskell</pre></li>
--   <li><pre>TypeFamilies</pre></li>
--   </ul>
--   
--   If the data type uses type families, <a>deriveGenericK</a> warns that
--   it skips the <a>GenericK</a> instances that require special support
--   for it
--   
--   <ul>
--   <li>Use <a>preDeriveGenericK</a> and <a>postDeriveGenericK</a> to
--   support type families.</li>
--   <li>Use <a>deriveGenericKQuiet</a> to silence the warnings.</li>
--   </ul>
deriveGenericK :: Name -> Q [Dec]

-- | Variant of <a>deriveGenericK</a> that doesn't emit warnings.
deriveGenericKQuiet :: Name -> Q [Dec]

-- | Generate <a>GenericK</a> instances for data types that may mention
--   type families.
--   
--   This <a>preDeriveGenericK</a> is to be used in combination with
--   <a>postDeriveGenericK</a>. These two functions let us stage the
--   compilation of the generated type instances, because GHC cannot
--   compile them in a single group.
--   
--   <ul>
--   <li><a>preDeriveGenericK</a> generates type instances to promote type
--   families that occur in the given data types (using <a>fcfify</a>; see
--   <a>fcf-family</a>). The <a>GenericK</a> instances are not produced at
--   this stage, they are accumulated in some internal global queue.</li>
--   <li><a>postDeriveGenericK</a> produces all of the accumulated
--   <a>GenericK</a> instances. It should be called in a slice separated
--   from <a>preDeriveGenericK</a>. Multiple calls to
--   <a>preDeriveGenericK</a> may precede <a>postDeriveGenericK</a>.</li>
--   </ul>
--   
--   <pre>
--   <a>preDeriveGenericK</a> ''MyT1
--   <a>preDeriveGenericK</a> ''MyT2
--   <a>preDeriveGenericK</a> ''MyT3
--   <a>postDeriveGenericK</a>
--   </pre>
--   
--   You will need to enable the extensions <tt>UndecidableInstances</tt>
--   and <tt>PolyKinds</tt> (even if your data types are not poly-kinded)
--   in addition to those mentioned in the documentation of
--   <a>deriveGenericK</a>.
preDeriveGenericK :: Name -> Q [Dec]

-- | See <a>preDeriveGenericK</a>.
postDeriveGenericK :: Q [Dec]
