// File generated by the BNF Converter (bnfc 2.9.6).

package org.syntax.lambdapi.simple;

/** Fold Visitor */
public abstract class FoldVisitor<R,A> implements AllVisitor<R,A> {
    public abstract R leaf(A arg);
    public abstract R combine(R x, R y, A arg);

/* Program */
    public R visit(org.syntax.lambdapi.simple.Absyn.AProgram p, A arg) {
      R r = leaf(arg);
      for (org.syntax.lambdapi.simple.Absyn.Command x : p.listcommand_)
      {
        r = combine(x.accept(this, arg), r, arg);
      }
      return r;
    }

/* Command */
    public R visit(org.syntax.lambdapi.simple.Absyn.CommandCheck p, A arg) {
      R r = leaf(arg);
      r = combine(p.term_1.accept(this, arg), r, arg);
      r = combine(p.term_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(org.syntax.lambdapi.simple.Absyn.CommandCompute p, A arg) {
      R r = leaf(arg);
      r = combine(p.term_1.accept(this, arg), r, arg);
      r = combine(p.term_2.accept(this, arg), r, arg);
      return r;
    }

/* Term */
    public R visit(org.syntax.lambdapi.simple.Absyn.Lam p, A arg) {
      R r = leaf(arg);
      r = combine(p.term_.accept(this, arg), r, arg);
      return r;
    }
    public R visit(org.syntax.lambdapi.simple.Absyn.Pi p, A arg) {
      R r = leaf(arg);
      r = combine(p.term_1.accept(this, arg), r, arg);
      r = combine(p.term_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(org.syntax.lambdapi.simple.Absyn.App p, A arg) {
      R r = leaf(arg);
      r = combine(p.term_1.accept(this, arg), r, arg);
      r = combine(p.term_2.accept(this, arg), r, arg);
      return r;
    }
    public R visit(org.syntax.lambdapi.simple.Absyn.Var p, A arg) {
      R r = leaf(arg);
      return r;
    }


}
