// File generated by the BNF Converter (bnfc 2.9.6).

package org.syntax.lambdapi.simple;

public class PrettyPrinter
{
  //For certain applications increasing the initial size of the buffer may improve performance.
  private static final int INITIAL_BUFFER_SIZE = 128;
  private static final int INDENT_WIDTH = 2;
  //You may wish to change the parentheses used in precedence.
  private static final String _L_PAREN = new String("(");
  private static final String _R_PAREN = new String(")");
  //You may wish to change render
  private static void render(String s)
  {
    if (s.equals("{"))
    {
       onEmptyLine();
       buf_.append(s);
       _n_ = _n_ + INDENT_WIDTH;
       buf_.append("\n");
       indent();
    }
    else if (s.equals("(") || s.equals("["))
       buf_.append(s);
    else if (s.equals(")") || s.equals("]"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals("}"))
    {
       _n_ = _n_ - INDENT_WIDTH;
       onEmptyLine();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals(","))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append(" ");
    }
    else if (s.equals(";"))
    {
       removeTrailingWhitespace();
       buf_.append(s);
       buf_.append("\n");
       indent();
    }
    else if (s.equals("")) return;
    else if (s.trim().equals(""))
    {
       backup();
       buf_.append(s);
    }
    else
    {
       buf_.append(s);
       buf_.append(" ");
    }
  }


  //  print and show methods are defined for each category.
  public static String print(org.syntax.lambdapi.simple.Absyn.Program foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(org.syntax.lambdapi.simple.Absyn.Program foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(org.syntax.lambdapi.simple.Absyn.Command foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(org.syntax.lambdapi.simple.Absyn.Command foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(org.syntax.lambdapi.simple.Absyn.ListCommand foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(org.syntax.lambdapi.simple.Absyn.ListCommand foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String print(org.syntax.lambdapi.simple.Absyn.Term foo)
  {
    pp(foo, 0);
    trim();
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  public static String show(org.syntax.lambdapi.simple.Absyn.Term foo)
  {
    sh(foo);
    String temp = buf_.toString();
    buf_.delete(0,buf_.length());
    return temp;
  }
  /***   You shouldn't need to change anything beyond this point.   ***/

  private static void pp(org.syntax.lambdapi.simple.Absyn.Program foo, int _i_)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.AProgram)
    {
       org.syntax.lambdapi.simple.Absyn.AProgram _aprogram = (org.syntax.lambdapi.simple.Absyn.AProgram) foo;
       if (_i_ > 0) render(_L_PAREN);
       pp(_aprogram.listcommand_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(org.syntax.lambdapi.simple.Absyn.Command foo, int _i_)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.CommandCheck)
    {
       org.syntax.lambdapi.simple.Absyn.CommandCheck _commandcheck = (org.syntax.lambdapi.simple.Absyn.CommandCheck) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("check");
       pp(_commandcheck.term_1, 0);
       render(":");
       pp(_commandcheck.term_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof org.syntax.lambdapi.simple.Absyn.CommandCompute)
    {
       org.syntax.lambdapi.simple.Absyn.CommandCompute _commandcompute = (org.syntax.lambdapi.simple.Absyn.CommandCompute) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("compute");
       pp(_commandcompute.term_1, 0);
       render(":");
       pp(_commandcompute.term_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }

  }

  private static void pp(org.syntax.lambdapi.simple.Absyn.ListCommand foo, int _i_)
  {
    ppListCommand(foo.iterator(), _i_);
  }

  private static void ppListCommand(java.util.Iterator<org.syntax.lambdapi.simple.Absyn.Command> it, int _i_)
  {
    if (it.hasNext())
    { /* cons */
      org.syntax.lambdapi.simple.Absyn.Command el = it.next();
      pp(el, _i_); render(";"); ppListCommand(it, _i_);
    }
  }


  private static void pp(org.syntax.lambdapi.simple.Absyn.Term foo, int _i_)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.Lam)
    {
       org.syntax.lambdapi.simple.Absyn.Lam _lam = (org.syntax.lambdapi.simple.Absyn.Lam) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("λ");
       pp(_lam.ident_, 0);
       render(".");
       pp(_lam.term_, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof org.syntax.lambdapi.simple.Absyn.Pi)
    {
       org.syntax.lambdapi.simple.Absyn.Pi _pi = (org.syntax.lambdapi.simple.Absyn.Pi) foo;
       if (_i_ > 0) render(_L_PAREN);
       render("Π");
       render("(");
       pp(_pi.ident_, 0);
       render(":");
       pp(_pi.term_1, 0);
       render(")");
       render("→");
       pp(_pi.term_2, 0);
       if (_i_ > 0) render(_R_PAREN);
    }
    else     if (foo instanceof org.syntax.lambdapi.simple.Absyn.App)
    {
       org.syntax.lambdapi.simple.Absyn.App _app = (org.syntax.lambdapi.simple.Absyn.App) foo;
       if (_i_ > 1) render(_L_PAREN);
       pp(_app.term_1, 1);
       pp(_app.term_2, 2);
       if (_i_ > 1) render(_R_PAREN);
    }
    else     if (foo instanceof org.syntax.lambdapi.simple.Absyn.Var)
    {
       org.syntax.lambdapi.simple.Absyn.Var _var = (org.syntax.lambdapi.simple.Absyn.Var) foo;
       if (_i_ > 2) render(_L_PAREN);
       pp(_var.ident_, 0);
       if (_i_ > 2) render(_R_PAREN);
    }

  }


  private static void sh(org.syntax.lambdapi.simple.Absyn.Program foo)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.AProgram)
    {
       org.syntax.lambdapi.simple.Absyn.AProgram _aprogram = (org.syntax.lambdapi.simple.Absyn.AProgram) foo;
       render("(");
       render("AProgram");
       render("[");
       sh(_aprogram.listcommand_);
       render("]");
       render(")");
    }
  }

  private static void sh(org.syntax.lambdapi.simple.Absyn.Command foo)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.CommandCheck)
    {
       org.syntax.lambdapi.simple.Absyn.CommandCheck _commandcheck = (org.syntax.lambdapi.simple.Absyn.CommandCheck) foo;
       render("(");
       render("CommandCheck");
       sh(_commandcheck.term_1);
       sh(_commandcheck.term_2);
       render(")");
    }
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.CommandCompute)
    {
       org.syntax.lambdapi.simple.Absyn.CommandCompute _commandcompute = (org.syntax.lambdapi.simple.Absyn.CommandCompute) foo;
       render("(");
       render("CommandCompute");
       sh(_commandcompute.term_1);
       sh(_commandcompute.term_2);
       render(")");
    }
  }

  private static void sh(org.syntax.lambdapi.simple.Absyn.ListCommand foo)
  {
     for (java.util.Iterator<org.syntax.lambdapi.simple.Absyn.Command> it = foo.iterator(); it.hasNext();)
     {
       sh(it.next());
       if (it.hasNext())
         render(",");
     }
  }

  private static void sh(org.syntax.lambdapi.simple.Absyn.Term foo)
  {
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.Lam)
    {
       org.syntax.lambdapi.simple.Absyn.Lam _lam = (org.syntax.lambdapi.simple.Absyn.Lam) foo;
       render("(");
       render("Lam");
       sh(_lam.ident_);
       sh(_lam.term_);
       render(")");
    }
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.Pi)
    {
       org.syntax.lambdapi.simple.Absyn.Pi _pi = (org.syntax.lambdapi.simple.Absyn.Pi) foo;
       render("(");
       render("Pi");
       sh(_pi.ident_);
       sh(_pi.term_1);
       sh(_pi.term_2);
       render(")");
    }
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.App)
    {
       org.syntax.lambdapi.simple.Absyn.App _app = (org.syntax.lambdapi.simple.Absyn.App) foo;
       render("(");
       render("App");
       sh(_app.term_1);
       sh(_app.term_2);
       render(")");
    }
    if (foo instanceof org.syntax.lambdapi.simple.Absyn.Var)
    {
       org.syntax.lambdapi.simple.Absyn.Var _var = (org.syntax.lambdapi.simple.Absyn.Var) foo;
       render("(");
       render("Var");
       sh(_var.ident_);
       render(")");
    }
  }


  private static void pp(Integer n, int _i_) { buf_.append(n); buf_.append(" "); }
  private static void pp(Double d, int _i_) { buf_.append(String.format(java.util.Locale.ROOT, "%.15g ", d)); }
  private static void pp(String s, int _i_) { buf_.append(s); buf_.append(" "); }
  private static void pp(Character c, int _i_) { buf_.append("'" + escape(c.toString()) + "'"); buf_.append(" "); }
  private static void sh(Integer n) { render(n.toString()); }
  private static void sh(Double d) { render(String.format(java.util.Locale.ROOT, "%.15g", d)); }
  private static void sh(Character c) { render("'" + escape(c.toString()) + "'"); }
  private static void sh(String s) { printQuoted(s); }

  private static void printQuoted(String s) { render("\"" + escape(s) + "\""); }

  public static String escape(String s) {
    if (s == null) return null;
    return s.replace("\\", "\\\\")
            .replace("\t", "\\t")
            .replace("\b", "\\b")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\f", "\\f")
            .replace("\"", "\\\"");
  }

  private static void indent()
  {
    int n = _n_;
    while (n > 0)
    {
      buf_.append(' ');
      n--;
    }
  }

  private static void backup()
  {
    int prev = buf_.length() - 1;
    if (prev >= 0 && buf_.charAt(prev) == ' ')
      buf_.setLength(prev);
  }

  private static void trim()
  {
    // Trim initial spaces
    int end = 0;
    int len = buf_.length();
    while (end < len && buf_.charAt(end) == ' ')
      end++;
    buf_.delete(0, end);
    // Trim trailing spaces
    removeTrailingSpaces();
  }

  private static void removeTrailingSpaces()
  {
    int end = buf_.length();
    while (end > 0 && buf_.charAt(end-1) == ' ')
      end--;
    buf_.setLength(end);
  }

  private static void removeTrailingWhitespace()
  {
    int end = buf_.length();
    while (end > 0 && (buf_.charAt(end-1) == ' ' || buf_.charAt(end-1) == '\n'))
      end--;
    buf_.setLength(end);
  }

  private static void onEmptyLine()
  {
    removeTrailingSpaces();
    int len = buf_.length();
    if (len > 0 && buf_.charAt(len-1) != '\n') buf_.append("\n");
    indent();
  }

  private static int _n_ = 0;
  private static StringBuilder buf_ = new StringBuilder(INITIAL_BUFFER_SIZE);
}

