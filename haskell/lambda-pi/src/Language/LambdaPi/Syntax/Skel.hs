-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.LambdaPi.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.LambdaPi.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarIdent :: Language.LambdaPi.Syntax.Abs.VarIdent -> Result
transVarIdent x = case x of
  Language.LambdaPi.Syntax.Abs.VarIdent string -> failure x

transProgram :: Language.LambdaPi.Syntax.Abs.Program -> Result
transProgram x = case x of
  Language.LambdaPi.Syntax.Abs.AProgram commands -> failure x

transCommand :: Language.LambdaPi.Syntax.Abs.Command -> Result
transCommand x = case x of
  Language.LambdaPi.Syntax.Abs.CommandCheck term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.CommandCompute term1 term2 -> failure x

transTerm :: Language.LambdaPi.Syntax.Abs.Term -> Result
transTerm x = case x of
  Language.LambdaPi.Syntax.Abs.Var varident -> failure x
  Language.LambdaPi.Syntax.Abs.Pi pattern_ term scopedterm -> failure x
  Language.LambdaPi.Syntax.Abs.Lam pattern_ scopedterm -> failure x
  Language.LambdaPi.Syntax.Abs.App term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.Product term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.Pair term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.First term -> failure x
  Language.LambdaPi.Syntax.Abs.Second term -> failure x
  Language.LambdaPi.Syntax.Abs.Universe -> failure x

transScopedTerm :: Language.LambdaPi.Syntax.Abs.ScopedTerm -> Result
transScopedTerm x = case x of
  Language.LambdaPi.Syntax.Abs.AScopedTerm term -> failure x

transPattern :: Language.LambdaPi.Syntax.Abs.Pattern -> Result
transPattern x = case x of
  Language.LambdaPi.Syntax.Abs.PatternWildcard -> failure x
  Language.LambdaPi.Syntax.Abs.PatternVar varident -> failure x
  Language.LambdaPi.Syntax.Abs.PatternPair pattern_1 pattern_2 -> failure x
