-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.LambdaPi.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.LambdaPi.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarIdent :: Language.LambdaPi.Syntax.Abs.VarIdent -> Result
transVarIdent x = case x of
  Language.LambdaPi.Syntax.Abs.VarIdent string -> failure x

transProgram :: Show a => Language.LambdaPi.Syntax.Abs.Program' a -> Result
transProgram x = case x of
  Language.LambdaPi.Syntax.Abs.AProgram _ commands -> failure x

transCommand :: Show a => Language.LambdaPi.Syntax.Abs.Command' a -> Result
transCommand x = case x of
  Language.LambdaPi.Syntax.Abs.CommandCheck _ term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.CommandCompute _ term1 term2 -> failure x

transTerm :: Show a => Language.LambdaPi.Syntax.Abs.Term' a -> Result
transTerm x = case x of
  Language.LambdaPi.Syntax.Abs.Var _ varident -> failure x
  Language.LambdaPi.Syntax.Abs.Pi _ pattern_ term scopedterm -> failure x
  Language.LambdaPi.Syntax.Abs.Lam _ pattern_ scopedterm -> failure x
  Language.LambdaPi.Syntax.Abs.App _ term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.Product _ term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.Pair _ term1 term2 -> failure x
  Language.LambdaPi.Syntax.Abs.First _ term -> failure x
  Language.LambdaPi.Syntax.Abs.Second _ term -> failure x
  Language.LambdaPi.Syntax.Abs.Universe _ -> failure x

transScopedTerm :: Show a => Language.LambdaPi.Syntax.Abs.ScopedTerm' a -> Result
transScopedTerm x = case x of
  Language.LambdaPi.Syntax.Abs.AScopedTerm _ term -> failure x

transPattern :: Show a => Language.LambdaPi.Syntax.Abs.Pattern' a -> Result
transPattern x = case x of
  Language.LambdaPi.Syntax.Abs.PatternWildcard _ -> failure x
  Language.LambdaPi.Syntax.Abs.PatternVar _ varident -> failure x
  Language.LambdaPi.Syntax.Abs.PatternPair _ pattern_1 pattern_2 -> failure x
