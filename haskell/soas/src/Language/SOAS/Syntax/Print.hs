-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Language.

module Language.SOAS.Syntax.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Language.SOAS.Syntax.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Language.SOAS.Syntax.Abs.VarIdent where
  prt _ (Language.SOAS.Syntax.Abs.VarIdent i) = doc $ showString i
instance Print Language.SOAS.Syntax.Abs.OpIdent where
  prt _ (Language.SOAS.Syntax.Abs.OpIdent i) = doc $ showString i
instance Print Language.SOAS.Syntax.Abs.MetaVarIdent where
  prt _ (Language.SOAS.Syntax.Abs.MetaVarIdent i) = doc $ showString i
instance Print (Language.SOAS.Syntax.Abs.TermTyping' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.TermTyping _ typebinders context scopedterm type_ -> prPrec i 0 (concatD [doc (showString "\8704"), prt 0 typebinders, doc (showString "."), prt 0 context, doc (showString "\8866"), prt 0 scopedterm, doc (showString ":"), prt 0 type_])

instance Print (Language.SOAS.Syntax.Abs.Context' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.Context _ metavartypings vartypings -> prPrec i 0 (concatD [prt 0 metavartypings, doc (showString "|"), prt 0 vartypings])

instance Print (Language.SOAS.Syntax.Abs.VarTyping' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.VarTyping _ varident type_ -> prPrec i 0 (concatD [prt 0 varident, doc (showString ":"), prt 0 type_])

instance Print [Language.SOAS.Syntax.Abs.VarTyping' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.MetaVarTyping' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.MetaVarTyping _ metavarident types type_ -> prPrec i 0 (concatD [prt 0 metavarident, doc (showString ":"), doc (showString "["), prt 0 types, doc (showString "]"), prt 0 type_])

instance Print [Language.SOAS.Syntax.Abs.MetaVarTyping' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.OpTyping' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.OpTyping _ opident typebinders opargtypings scopedtype -> prPrec i 0 (concatD [prt 0 opident, doc (showString ":"), doc (showString "\8704"), prt 0 typebinders, doc (showString "."), doc (showString "("), prt 0 opargtypings, doc (showString ")"), doc (showString "\8594"), prt 0 scopedtype])

instance Print (Language.SOAS.Syntax.Abs.Constraint' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.ConstraintEq _ binders scopedterm1 scopedterm2 -> prPrec i 0 (concatD [doc (showString "\8704"), prt 0 binders, doc (showString "."), prt 0 scopedterm1, doc (showString "="), prt 0 scopedterm2])

instance Print (Language.SOAS.Syntax.Abs.Unifier' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.Unifier _ substs -> prPrec i 0 (concatD [doc (showString "["), prt 0 substs, doc (showString "]")])

instance Print (Language.SOAS.Syntax.Abs.Subst' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.Subst _ metavarident binders scopedterm -> prPrec i 0 (concatD [prt 0 metavarident, doc (showString "["), prt 0 binders, doc (showString "]"), doc (showString "\8614"), prt 0 scopedterm])

instance Print [Language.SOAS.Syntax.Abs.Subst' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.Term' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.Var _ varident -> prPrec i 0 (concatD [prt 0 varident])
    Language.SOAS.Syntax.Abs.Op _ opident opargs -> prPrec i 0 (concatD [prt 0 opident, doc (showString "("), prt 0 opargs, doc (showString ")")])
    Language.SOAS.Syntax.Abs.MetaVar _ metavarident terms -> prPrec i 0 (concatD [prt 0 metavarident, doc (showString "["), prt 0 terms, doc (showString "]")])

instance Print [Language.SOAS.Syntax.Abs.Term' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.OpArg' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.OpArg _ binders scopedterm -> prPrec i 0 (concatD [prt 0 binders, doc (showString "."), prt 0 scopedterm])

instance Print [Language.SOAS.Syntax.Abs.OpArg' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.Binders' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.NoBinders _ -> prPrec i 0 (concatD [])
    Language.SOAS.Syntax.Abs.SomeBinders _ varident binders -> prPrec i 0 (concatD [prt 0 varident, prt 0 binders])

instance Print (Language.SOAS.Syntax.Abs.ScopedTerm' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.ScopedTerm _ term -> prPrec i 0 (concatD [prt 0 term])

instance Print (Language.SOAS.Syntax.Abs.TypeVarIdent' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.TypeVarIdent _ varident -> prPrec i 0 (concatD [prt 0 varident])

instance Print (Language.SOAS.Syntax.Abs.Type' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.TypeFun _ type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "\8594"), prt 1 type_2])
    Language.SOAS.Syntax.Abs.TypeProduce _ type_1 type_2 -> prPrec i 1 (concatD [prt 1 type_1, doc (showString "\215"), prt 2 type_2])
    Language.SOAS.Syntax.Abs.TypeVar _ typevarident -> prPrec i 2 (concatD [prt 0 typevarident])

instance Print [Language.SOAS.Syntax.Abs.Type' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.TypeBinders' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.NoTypeBinders _ -> prPrec i 0 (concatD [])
    Language.SOAS.Syntax.Abs.SomeTypeBinders _ typevarident typebinders -> prPrec i 0 (concatD [prt 0 typevarident, prt 0 typebinders])

instance Print (Language.SOAS.Syntax.Abs.OpArgTyping' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.OpArgTyping _ typebinders scopedtype -> prPrec i 0 (concatD [prt 0 typebinders, doc (showString "."), prt 0 scopedtype])

instance Print [Language.SOAS.Syntax.Abs.OpArgTyping' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Language.SOAS.Syntax.Abs.ScopedType' a) where
  prt i = \case
    Language.SOAS.Syntax.Abs.ScopedType _ type_ -> prPrec i 0 (concatD [prt 0 type_])
